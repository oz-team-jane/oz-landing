---
description: 시스템 아키텍처
alwaysApply: false
---
# OneTrip AI 여행 계획 자동화 서비스 시스템 아키텍처

## 🎯 프로젝트 개요
- **서비스명**: OneTrip (원트립)
- **목적**: AI 기반 여행 계획 자동화 웹 서비스
- **핵심 기능**: 흩어진 여행 정보를 AI가 분석하여 최적화된 여행 계획 자동 생성

## 🏗️ 시스템 아키텍처

### 아키텍처 구성요소
```mermaid
graph TB
    subgraph "프론트엔드 계층"
        A[Next.js 15 + TypeScript]
        B[Tailwind CSS + Shadcn/ui]
        C[Mapbox GL JS]
        D[TanStack Query]
        E[Zustand 상태관리]
    end

    subgraph "백엔드 API 계층"
        F[FastAPI + Python 3.12]
        G[Pydantic 데이터 검증]
        H[JWT 인증/인가]
        I[CORS Middleware]
    end

    subgraph "AI Agent 계층"
        J[LangGraph 워크플로우]
        K[GPT-4o 메인 모델]
        L[GPT-4o-mini 경량 모델]
        M[NLP 처리 엔진]
        N[모호함 탐지 시스템]
    end

    subgraph "데이터 계층"
        O[(PostgreSQL 16)]
        P[(Redis 7)]
        Q[Supabase BaaS]
    end

    subgraph "외부 API 통합"
        R[OpenAI API]
        S[Google Maps API]
        T[GoogleAPI/NaverAPI]
        U[Weather API]
    end

    subgraph "파일 처리 시스템"
        V[PDF 파싱 - PyPDF2]
        W[OCR 처리 - Tesseract]
        X[이미지 처리 - Pillow]
    end

    A --> F
    B --> A
    C --> A
    D --> F
    E --> A
    F --> J
    G --> F
    H --> F
    I --> F
    J --> K
    J --> L
    J --> M
    J --> N
    F --> O
    F --> P
    F --> Q
    J --> R
    J --> S
    J --> T
    J --> U
    F --> V
    F --> W
    F --> X
```

### 계층 구조 및 데이터 흐름
```mermaid
flowchart TD
    subgraph "클라이언트 계층"
        USER[사용자]
        BROWSER[웹 브라우저]
    end

    subgraph "프레젠테이션 계층"
        NEXTJS[Next.js App Router]
        UI[React 컴포넌트]
        STATE[상태 관리]
    end

    subgraph "비즈니스 로직 계층"
        API[FastAPI 서버]
        AUTH[인증 미들웨어]
        VALID[데이터 검증]
    end

    subgraph "AI 처리 계층"
        AGENT[LangGraph Agent]
        LLM[GPT 모델들]
        NLP[NLP 엔진]
        TOOLS[Agent 도구들]
    end

    subgraph "데이터 접근 계층"
        ORM[SQLAlchemy ORM]
        CACHE[Redis 캐시]
        FILES[파일 처리]
    end

    subgraph "데이터 저장 계층"
        DB[(PostgreSQL)]
        REDIS[(Redis)]
        STORAGE[파일 스토리지]
    end

    subgraph "외부 서비스 계층"
        OPENAI[OpenAI API]
        MAPS[Google Maps]
        SEARCH[검색 API들]
        WEATHER[날씨 API]
    end

    USER --> BROWSER
    BROWSER --> NEXTJS
    NEXTJS --> UI
    UI --> STATE
    STATE --> API
    API --> AUTH
    AUTH --> VALID
    VALID --> AGENT
    AGENT --> LLM
    AGENT --> NLP
    AGENT --> TOOLS
    TOOLS --> OPENAI
    TOOLS --> MAPS
    TOOLS --> SEARCH
    TOOLS --> WEATHER
    API --> ORM
    API --> CACHE
    API --> FILES
    ORM --> DB
    CACHE --> REDIS
    FILES --> STORAGE
```

### 모듈화 및 컴포넌트 구조
```mermaid
graph LR
    subgraph "프론트엔드 모듈"
        A1[pages/components]
        A2[hooks/utils]
        A3[stores/context]
        A4[types/interfaces]
    end

    subgraph "백엔드 모듈"
        B1[routers/endpoints]
        B2[services/business]
        B3[models/schemas]
        B4[utils/helpers]
    end

    subgraph "AI Agent 모듈"
        C1[workflows/graphs]
        C2[tools/functions]
        C3[processors/nlp]
        C4[memory/state]
    end

    subgraph "공통 모듈"
        D1[types/shared]
        D2[config/settings]
        D3[constants/enums]
        D4[validators/schemas]
    end

    A1 --> B1
    A2 --> B2
    A3 --> C4
    A4 --> D1
    B1 --> C1
    B2 --> C2
    B3 --> D1
    B4 --> D2
    C1 --> D3
    C2 --> D4
    C3 --> D4
    C4 --> D2
```

### API 및 인터페이스 설계
```mermaid
sequenceDiagram
    participant User as 사용자
    participant Web as Next.js 웹앱
    participant API as FastAPI 서버
    participant Agent as LangGraph Agent
    participant LLM as GPT-4o
    participant ExtAPI as 외부 API들
    participant DB as 데이터베이스

    User->>Web: 여행 정보 입력
    Web->>API: POST /api/travel/analyze
    API->>Agent: 여행 계획 생성 요청
    Agent->>LLM: 정보 파싱 및 분석
    LLM-->>Agent: 구조화된 데이터
    Agent->>ExtAPI: 실시간 정보 조회
    ExtAPI-->>Agent: 검색 결과
    Agent->>Agent: 최적 경로 계산
    Agent->>DB: 결과 저장
    Agent-->>API: 여행 계획 반환
    API-->>Web: JSON 응답
    Web-->>User: 시각화된 계획 표시
```

### 시스템 외부 환경과의 관계
```mermaid
graph TB
    subgraph "OneTrip 시스템"
        CORE[핵심 시스템]
    end

    subgraph "외부 API 서비스"
        OPENAI_EXT[OpenAI API]
        GOOGLE_EXT[Google Maps API]
        NAVER_EXT[Naver API]
        WEATHER_EXT[Weather API]
    end

    subgraph "클라우드 인프라"
        VERCEL[Vercel 호스팅]
        SUPABASE[Supabase DB]
        CDN[CDN 서비스]
    end

    subgraph "개발/운영 도구"
        GITHUB[GitHub Repository]
        SENTRY[Sentry 모니터링]
        ANALYTICS[Vercel Analytics]
    end

    subgraph "사용자 환경"
        DESKTOP[데스크톱 브라우저]
        MOBILE[모바일 브라우저]
        PWA[PWA 앱]
    end

    CORE --> OPENAI_EXT
    CORE --> GOOGLE_EXT
    CORE --> NAVER_EXT
    CORE --> WEATHER_EXT
    CORE --> VERCEL
    CORE --> SUPABASE
    CORE --> CDN
    CORE --> SENTRY
    CORE --> ANALYTICS
    GITHUB --> CORE
    DESKTOP --> CORE
    MOBILE --> CORE
    PWA --> CORE
```

## 🛠️ 기술 스택

### 프론트엔드
- **Framework**: Next.js 15 (App Router)
- **Language**: TypeScript 5.6+
- **Styling**: Tailwind CSS 4.0 + Shadcn/ui
- **State**: Zustand + TanStack Query v5
- **Maps**: Mapbox GL JS + @vis.gl/react-google-maps
- **Deploy**: Vercel

### 백엔드
- **Framework**: FastAPI 0.110+
- **Language**: Python 3.12
- **Database**: PostgreSQL 16 + Redis 7
- **BaaS**: Supabase
- **Auth**: JWT + OAuth2
- **Deploy**: Railway/Fly.io

### AI Agent
- **Framework**: LangGraph + LangChain
- **Models**: GPT-4o + GPT-4o-mini
- **NLP**: spaCy + NLTK + python-dateutil
- **Memory**: LangGraph Local + Persistent Memory
- **Tools**: Custom 도구들 (Maps, Weather, Search 등)

### 외부 API
- **AI**: OpenAI API
- **Maps**: Google Maps API
- **Search**: GoogleAPI + NaverAPI
- **Weather**: Weather API

## 📝 개발 가이드라인

### 코드 스타일
- TypeScript Strict Mode 사용
- ESLint + Prettier 준수
- 컴포넌트는 함수형으로 작성
- Custom Hook으로 로직 분리
- Pydantic 모델로 데이터 검증

### 폴더 구조
```
frontend/
├── app/                 # Next.js App Router
├── components/          # 재사용 컴포넌트
├── hooks/              # Custom Hooks
├── lib/                # 유틸리티 함수
├── stores/             # Zustand 스토어
└── types/              # TypeScript 타입

backend/
├── app/
│   ├── routers/        # FastAPI 라우터
│   ├── services/       # 비즈니스 로직
│   ├── models/         # Pydantic 모델
│   ├── utils/          # 유틸리티
│   └── agents/         # LangGraph Agent
├── tests/              # 테스트 코드
└── requirements.txt    # Python 의존성
```

### 개발 우선순위
1. **MVP 기능**: 기본 텍스트 입력 → AI 분석 → 여행 계획 생성
2. **파일 처리**: PDF/이미지 파싱 추가
3. **실시간 기능**: 추천 리스트 클릭으로 일정 수정
4. **고급 기능**: 모호함 해결, 협업, 공유 기능

### 성능 최적화
- Next.js App Router로 서버 사이드 렌더링
- TanStack Query로 API 캐싱
- Redis로 백엔드 캐싱
- 이미지 최적화 및 CDN 활용
- LangGraph 워크플로우 비동기 처리 # OneTrip AI 여행 계획 자동화 서비스 - Cursor Rules